# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Вариант №1
#
# Сгенерированный список:
# [6, 9, 5, 8, 7, 8, 5, 9, 4, 8, 9, 3, 7, 3, 5, 1, 4, 4, 2, 7]
#
# Числа которые ищем:
# [1, 2, 3, 4, 5, 6, 7, 8, 9]
#
# Словарь (число : количество в списке):
# {1: 1, 2: 1, 3: 2, 4: 3, 5: 3, 6: 1, 7: 3, 8: 3, 9: 3}
#
# Самое встречающиеся число - 9
#
# Количество памяти занятой в RAM перменными 1015 байт.
# Python 3.8.3  32 bit
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Вариант №2
#
# Сгенерированный список:
# [5, 1, 1, 7, 2, 8, 7, 5, 9, 6, 6, 2, 3, 3, 1, 8, 1, 6, 9, 6]
#
# Самое встречающиеся число - 1
#
# Количество памяти занятой в RAM перменными 642 байт.
# Python 3.8.3  32 bit
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Вариант №3
# Сгенерированный список:
# [9, 2, 2, 2, 1, 4, 7, 4, 9, 9, 1, 6, 2, 7, 7, 9, 5, 2, 9, 8]
#
# Самое встречающиеся число - [2]
#
# Количество памяти занятой в RAM перменными 697 байт.
# Python 3.8.3  32 bit
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# Вывод:
# Как видно из результата В1 - 1015 байт, В2 - 642 байт, В3 - 697 байт. Наиболее эфеективным является вариант В2
# как по использованию оперативной памяти, так-же по быстродействию и простоте читаемости кода(результаты по
# быстродействию не приведены в данном выводе)

# З.Ы.
# Изначально хотел отфильтровать системные перменные которые вытаскивает globals() но по логике вещей они ведь кушают
# память и что то там храниться в зависимости от написанного кода, а возмоджно и нет, вообще черт его знает
# что там храниться если поясните в комментариях будет очень позновательно. И поэтому я их
# учел в финальном расчете потому что, если что то ест память то оно должно в нем учтено.
